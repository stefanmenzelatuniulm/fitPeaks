function [] = slider_plot()
% Plot different plots according to slider location.
% Junk data for comparison of adjusted curves in this example
datax = 0:pi/12:(23*pi/12);
datay = [0.305;  0.527; 0.759; 0.927; 0.997; 0.942; 0.771; 0.520; 0.309;
   0.137; 0.069; 0.143; 0.299; 0.530; 0.767; 0.932; 1.000; 0.943;
   0.783; 0.524; 0.309; 0.134; 0.068; 0.133];
% Define figure, normalized position can be adjusted to fit individual
% monitors.
S.fh = figure('units','normalized',...
    'Position', [0.515 0.025 0.415 0.87],... %%%%
              'name','slider_plot');
% Define axes so that room is available in figure window for sliders
S.ax = axes('unit','normalized',...
          'position',[0.1 0.5 0.8 0.45]);
% General cos^2 function
S.cosfunc = @(x,par) par(1)+par(2)*(cos(par(3)*x+par(4)).^2);
% Define inital parameter values for curve
S.a = 0.065;
S.b = 1;
S.c = 1;
S.d = 0;
% Interval 0 to 2*pi for plotting above function
S.theta = 0:0.01:2*pi;
% Plot junk data to adjust curve values to "fit"
S.p1 = scatter(datax,datay,'k');
hold on;
% Plot curve on top of junk data for visual comparison
S.p2 = plot(S.theta,S.cosfunc(S.theta,[S.a,S.b,S.c,S.d]));
hold off;
update(S);
% Slider for slope parameter:
S.aSlider = uicontrol('style','slider',...
               'unit','normalized',...
               'position',[0.2 0.1 0.7 0.01],...
               'min',0,'max',1,'value', S.a,...
               'sliderstep',[0.01 0.01],...
               'callback', {@SliderCB, 'a'}); 
% Add a text uicontrol to label the slider.
txta = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.11 0.7 0.02],...
     'String','Fitting Parameter "a"');
% 2nd Slider:
S.bSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.15 0.7 0.01],...
               'min',0,'max',1,'value', S.b,...
               'sliderstep',[0.01 0.01],...
               'callback', {@SliderCB, 'b'});
% Add a text uicontrol to label the slider.
txtb = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.16 0.7 0.02],...
     'String','Fitting Parameter "b"');       
% 3rd Slider:
S.cSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.2 0.7 0.01],...
               'min',0,'max',2,'value', S.c,...
               'sliderstep',[0.01 0.01],...
               'callback', {@SliderCB, 'c'});
% Add a text uicontrol to label the slider.
txtc = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.21 0.7 0.02],...
     'String','Fitting Parameter "c"');
% 4th Slider:
S.dSlider = uicontrol('style','slide',...
               'unit','normalized',...
               'position',[0.2 0.25 0.7 0.01],...
               'min',-pi,'max',pi,'value', S.d,...
               'sliderstep',[0.01 0.01],...
               'callback', {@SliderCB, 'd'});
% Add a text uicontrol to label the slider.
txtd = uicontrol('Style','text',...
     'unit','normalized',...
               'position',[0.2 0.26 0.7 0.02],...
     'String','Fitting Parameter "d"');       
guidata(S.fh, S);  % Store S structure in the figure
end
% Callback for all sliders defined above
function SliderCB(aSlider, EventData, Param)
S = guidata(aSlider);  % Get S structure from the figure
S.(Param) = get(aSlider, 'Value');  % Any of the 'a', 'b', etc. defined
update(S);  % Update the plot values
guidata(aSlider, S);  % Store modified S in figure
end
% Plot update function, creates new y-vector for plot and replaces the plot
% S.p2 with new y-vector
function update(S)
y = S.cosfunc(S.theta,[S.a,S.b,S.c,S.d]);   % General cos^2 function
set(S.p2, 'YData', y);  % Replace old plot with new plotting values
end